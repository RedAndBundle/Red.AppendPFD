// Appends PDF Files to your ForNAV reports
// Copyright (C) 2020  Red and Bundle
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
Report 88800 "Red Quote"
{
    Caption = 'Quote';
    UsageCategory = ReportsAndAnalysis;
    WordLayout = '.\Layouts\Red Quote.docx';
    DefaultLayout = Word;

    dataset
    {
        dataitem(Header; "Sales Header")
        {
            CalcFields = "Amount Including VAT", Amount;
            DataItemTableView = sorting("No.") where("Document Type" = const(Quote));
            RequestFilterFields = "No.", "Posting Date";
            column(ReportForNavId_2; 2) { } // Autogenerated by ForNav - Do not delete
            column(ReportForNav_Header; ReportForNavWriteDataItem('Header', Header)) { }
            column(HasDiscount; ForNAVCheckDocumentDiscount.HasDiscount(Header))
            {
                IncludeCaption = false;
            }
            dataitem(Line; "Sales Line")
            {
                DataItemLinkReference = Header;
                DataItemLink = "Document No." = FIELD("No."), "Document Type" = FIELD("Document Type");
                DataItemTableView = sorting("Document No.", "Line No.");
                column(ReportForNavId_3; 3) { } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_Line; ReportForNavWriteDataItem('Line', Line)) { }
                trigger OnPreDataItem();
                begin
                end;

            }
            dataitem(VATAmountLine; "VAT Amount Line")
            {
                UseTemporary = true;
                DataItemTableView = sorting("VAT Identifier", "VAT Calculation Type", "Tax Group Code", "Use Tax", Positive);
                column(ReportForNavId_1000000001; 1000000001) { } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_VATAmountLine; ReportForNavWriteDataItem('VATAmountLine', VATAmountLine)) { }
                trigger OnPreDataItem();
                begin
                    if not PrintVATAmountLines() then
                        CurrReport.Break();
                end;

            }
            dataitem(VATClause; "VAT Clause")
            {
                UseTemporary = true;
                DataItemTableView = sorting(Code);
                column(ReportForNavId_1000000002; 1000000002) { } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_VATClause; ReportForNavWriteDataItem('VATClause', VATClause)) { }
                trigger OnPreDataItem();
                begin
                end;

            }
            trigger OnPreDataItem();
            begin
            end;

            trigger OnAfterGetRecord();
            begin

                ChangeLanguage("Language Code");
                GetVatAmountLines();
                GetVATClauses();
                UpdateNoPrinted();
            end;

        }
    }


    requestpage
    {
        SaveValues = true;

        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(NoOfCopy; NoOfCopies)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'No. of Copies';
                        ToolTip = 'Specifies the number of copies.';
                    }
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Design';
                        ToolTip = 'Specifies opening the ForNAV Designer.';
                        Visible = ReportForNavAllowDesign;
                        trigger OnValidate()
                        begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;
                    }
                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;
        Codeunit.Run(Codeunit::"ForNAV First Time Setup");
        AppendPdf();
    end;

    trigger OnPostReport()
    begin


    end;

    trigger OnPreReport()
    begin
        ;

        ReportForNav.SetCopies('Header', NoOfCopies);
        LoadWatermark();
        ;
        ReportsForNavPre;

    end;

    var
        ForNAVCheckDocumentDiscount: Codeunit "ForNAV Check Document Discount";
        NoOfCopies: Integer;


    local procedure AppendPdf()
    var
        ForNAVSetup: Record "ForNAV Setup";
        InStream: InStream;
    begin
        with ForNAVSetup do begin
            Get();
            CalcFields("Red Append PDF");
            if not "Red Append PDF".Hasvalue then
                exit;

            ForNavSetup."Red Append PDF".CreateInStream(InStream);
            ReportForNav.SetAppendPdf('Header', InStream);
        end;
    end;

    local procedure ChangeLanguage(LanguageCode: Code[10])
    var
        ForNAVSetup: Record "ForNAV Setup";
    begin
        ForNAVSetup.Get();
        if ForNAVSetup."Inherit Language Code" then
            CurrReport.Language(ReportForNav.GetLanguageID(LanguageCode));
    end;

    local procedure GetVatAmountLines()
    var
        ForNAVGetVatAmountLines: Codeunit "ForNAV Get Vat Amount Lines";
    begin
        VATAmountLine.DeleteAll();
        ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    end;

    local procedure GetVATClauses()
    var
        ForNAVGetVatClause: Codeunit "ForNAV Get Vat Clause";
    begin
        VATClause.DeleteAll();
        ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    end;

    local procedure PrintVATAmountLines(): Boolean
    var
        ForNAVSetup: Record "ForNAV Setup";
    begin
        with ForNAVSetup do begin
            Get();
            case "VAT Report Type" of
                "vat report type"::Always:
                    exit(true);
                "vat report type"::"Multiple Lines":
                    exit(VATAmountLine.Count > 1);
                "vat report type"::Never:
                    exit(false);
            end;
        end;
    end;

    local procedure UpdateNoPrinted()
    var
        ForNAVUpdateNoPrinted: Codeunit "ForNAV Update No. Printed";
    begin
        ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.Preview);
    end;

    local procedure LoadWatermark()
    var
        ForNAVSetup: Record "ForNAV Setup";
    begin
        with ForNAVSetup do begin
            Get();
            if not PrintLogo(ForNAVSetup) then
                exit;
            CalcFields("Document Watermark");
            if not "Document Watermark".Hasvalue then
                exit;

            ReportForNav.LoadWatermarkImage(ForNAVSetup.GetDocumentWatermark());
        end;
    end;

    procedure PrintLogo(ForNAVSetup: Record "ForNAV Setup"): Boolean
    begin
        if not ForNAVSetup."Use Preprinted Paper" then
            exit(true);
        exit(false);
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        ReportForNavInitialized: Boolean;
        ReportForNavShowOutput: Boolean;
        ReportForNavTotalsCausedBy: Boolean;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;
        ReportForNav: Codeunit "ForNAV Report Management";

    local procedure ReportsForNavInit()
    var
        id: Integer;
    begin
        Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1));
        ReportForNav.OnInit(id, ReportForNavAllowDesign);
    end;

    local procedure ReportsForNavPre()
    begin
        if ReportForNav.LaunchDesigner(ReportForNavOpenDesigner) then CurrReport.Quit();
    end;

    local procedure ReportForNavSetTotalsCausedBy(value: Boolean)
    begin
        ReportForNavTotalsCausedBy := value;
    end;

    local procedure ReportForNavSetShowOutput(value: Boolean)
    begin
        ReportForNavShowOutput := value;
    end;

    local procedure ReportForNavInit(jsonObject: JsonObject)
    begin
        ReportForNav.Init(jsonObject, CurrReport.ObjectId);
    end;

    local procedure ReportForNavWriteDataItem(dataItemId: Text; rec: Variant): Text
    var
        values: Text;
        jsonObject: JsonObject;
        currLanguage: Integer;
    begin
        if not ReportForNavInitialized then begin
            ReportForNavInit(jsonObject);
            ReportForNavInitialized := true;
        end;

        case (dataItemId) of
            'Header':
                begin
                    jsonObject.Add('CurrReport$Language$Integer', CurrReport.Language);
                end;
        end;
        ReportForNav.AddDataItemValues(jsonObject, dataItemId, rec);
        jsonObject.WriteTo(values);
        exit(values);
    end;
    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
